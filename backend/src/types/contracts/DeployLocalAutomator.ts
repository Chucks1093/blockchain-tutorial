/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface DeployLocalAutomatorInterface extends Interface {
  getFunction(
    nameOrSignature: "contractToAutomator" | "deployAutomator" | "getAutomator"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "AutomatorDeployed"): EventFragment;

  encodeFunctionData(
    functionFragment: "contractToAutomator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployAutomator",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAutomator",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "contractToAutomator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployAutomator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAutomator",
    data: BytesLike
  ): Result;
}

export namespace AutomatorDeployedEvent {
  export type InputTuple = [
    targetContract: AddressLike,
    automator: AddressLike,
    interval: BigNumberish
  ];
  export type OutputTuple = [
    targetContract: string,
    automator: string,
    interval: bigint
  ];
  export interface OutputObject {
    targetContract: string;
    automator: string;
    interval: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DeployLocalAutomator extends BaseContract {
  connect(runner?: ContractRunner | null): DeployLocalAutomator;
  waitForDeployment(): Promise<this>;

  interface: DeployLocalAutomatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  contractToAutomator: TypedContractMethod<
    [arg0: AddressLike],
    [string],
    "view"
  >;

  deployAutomator: TypedContractMethod<
    [targetContract: AddressLike, interval: BigNumberish, _owner: AddressLike],
    [string],
    "nonpayable"
  >;

  getAutomator: TypedContractMethod<
    [targetContract: AddressLike],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "contractToAutomator"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "deployAutomator"
  ): TypedContractMethod<
    [targetContract: AddressLike, interval: BigNumberish, _owner: AddressLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAutomator"
  ): TypedContractMethod<[targetContract: AddressLike], [string], "view">;

  getEvent(
    key: "AutomatorDeployed"
  ): TypedContractEvent<
    AutomatorDeployedEvent.InputTuple,
    AutomatorDeployedEvent.OutputTuple,
    AutomatorDeployedEvent.OutputObject
  >;

  filters: {
    "AutomatorDeployed(address,address,uint256)": TypedContractEvent<
      AutomatorDeployedEvent.InputTuple,
      AutomatorDeployedEvent.OutputTuple,
      AutomatorDeployedEvent.OutputObject
    >;
    AutomatorDeployed: TypedContractEvent<
      AutomatorDeployedEvent.InputTuple,
      AutomatorDeployedEvent.OutputTuple,
      AutomatorDeployedEvent.OutputObject
    >;
  };
}
