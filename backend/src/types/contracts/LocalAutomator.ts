/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface LocalAutomatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkAndExecute"
      | "interval"
      | "isRunning"
      | "lastCheck"
      | "owner"
      | "setInterval"
      | "setTargetContract"
      | "startAutomation"
      | "stopAutomation"
      | "targetContract"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "AutomationTriggered"): EventFragment;

  encodeFunctionData(
    functionFragment: "checkAndExecute",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "interval", values?: undefined): string;
  encodeFunctionData(functionFragment: "isRunning", values?: undefined): string;
  encodeFunctionData(functionFragment: "lastCheck", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTargetContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "startAutomation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stopAutomation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetContract",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "checkAndExecute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "interval", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isRunning", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastCheck", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTargetContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startAutomation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopAutomation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetContract",
    data: BytesLike
  ): Result;
}

export namespace AutomationTriggeredEvent {
  export type InputTuple = [timestamp: BigNumberish, wasNeeded: boolean];
  export type OutputTuple = [timestamp: bigint, wasNeeded: boolean];
  export interface OutputObject {
    timestamp: bigint;
    wasNeeded: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LocalAutomator extends BaseContract {
  connect(runner?: ContractRunner | null): LocalAutomator;
  waitForDeployment(): Promise<this>;

  interface: LocalAutomatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkAndExecute: TypedContractMethod<[], [boolean], "nonpayable">;

  interval: TypedContractMethod<[], [bigint], "view">;

  isRunning: TypedContractMethod<[], [boolean], "view">;

  lastCheck: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  setInterval: TypedContractMethod<
    [_interval: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTargetContract: TypedContractMethod<
    [_targetContract: AddressLike],
    [void],
    "nonpayable"
  >;

  startAutomation: TypedContractMethod<[], [void], "nonpayable">;

  stopAutomation: TypedContractMethod<[], [void], "nonpayable">;

  targetContract: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkAndExecute"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "interval"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isRunning"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastCheck"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setInterval"
  ): TypedContractMethod<[_interval: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTargetContract"
  ): TypedContractMethod<[_targetContract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startAutomation"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stopAutomation"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "targetContract"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AutomationTriggered"
  ): TypedContractEvent<
    AutomationTriggeredEvent.InputTuple,
    AutomationTriggeredEvent.OutputTuple,
    AutomationTriggeredEvent.OutputObject
  >;

  filters: {
    "AutomationTriggered(uint256,bool)": TypedContractEvent<
      AutomationTriggeredEvent.InputTuple,
      AutomationTriggeredEvent.OutputTuple,
      AutomationTriggeredEvent.OutputObject
    >;
    AutomationTriggered: TypedContractEvent<
      AutomationTriggeredEvent.InputTuple,
      AutomationTriggeredEvent.OutputTuple,
      AutomationTriggeredEvent.OutputObject
    >;
  };
}
