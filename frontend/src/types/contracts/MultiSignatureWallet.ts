/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace MultiSignatureWallet {
  export type TransactionStruct = {
    txHash: BytesLike;
    txIndex: BigNumberish;
    from: AddressLike;
    to: AddressLike;
    amount: BigNumberish;
    data: BytesLike;
    executed: boolean;
    confirmations: BigNumberish;
    timestamp: BigNumberish;
  };

  export type TransactionStructOutput = [
    txHash: string,
    txIndex: bigint,
    from: string,
    to: string,
    amount: bigint,
    data: string,
    executed: boolean,
    confirmations: bigint,
    timestamp: bigint
  ] & {
    txHash: string;
    txIndex: bigint;
    from: string;
    to: string;
    amount: bigint;
    data: string;
    executed: boolean;
    confirmations: bigint;
    timestamp: bigint;
  };
}

export interface MultiSignatureWalletInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CONFIRMATIIONS"
      | "addNewOwner"
      | "checkIsOwner"
      | "confirmTransaction"
      | "confirmedTransactions"
      | "executeTransaction"
      | "getBalace"
      | "getOwners"
      | "getTransationDetails"
      | "getUserTransactions"
      | "owners"
      | "removeOwner"
      | "revokeTransaction"
      | "submitTransaction"
      | "transactions"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnerAdded"
      | "OwnerRemoved"
      | "TransactionConfrimed"
      | "TransactionExecuted"
      | "TransactionRevoked"
      | "TransactionSubmitted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CONFIRMATIIONS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addNewOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIsOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmTransaction",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmedTransactions",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getBalace", values?: undefined): string;
  encodeFunctionData(functionFragment: "getOwners", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTransationDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTransactions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "owners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeTransaction",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTransaction",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CONFIRMATIIONS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIsOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmedTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalace", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTransationDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;
}

export namespace OwnerAddedEvent {
  export type InputTuple = [owner: AddressLike, ownerIndex: BigNumberish];
  export type OutputTuple = [owner: string, ownerIndex: bigint];
  export interface OutputObject {
    owner: string;
    ownerIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerRemovedEvent {
  export type InputTuple = [owner: AddressLike];
  export type OutputTuple = [owner: string];
  export interface OutputObject {
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionConfrimedEvent {
  export type InputTuple = [txHash: BytesLike, owner: AddressLike];
  export type OutputTuple = [txHash: string, owner: string];
  export interface OutputObject {
    txHash: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionExecutedEvent {
  export type InputTuple = [txHash: BytesLike];
  export type OutputTuple = [txHash: string];
  export interface OutputObject {
    txHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionRevokedEvent {
  export type InputTuple = [txHash: BytesLike, owner: AddressLike];
  export type OutputTuple = [txHash: string, owner: string];
  export interface OutputObject {
    txHash: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionSubmittedEvent {
  export type InputTuple = [
    txHash: BytesLike,
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [
    txHash: string,
    from: string,
    to: string,
    amount: bigint,
    data: string
  ];
  export interface OutputObject {
    txHash: string;
    from: string;
    to: string;
    amount: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MultiSignatureWallet extends BaseContract {
  connect(runner?: ContractRunner | null): MultiSignatureWallet;
  waitForDeployment(): Promise<this>;

  interface: MultiSignatureWalletInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CONFIRMATIIONS: TypedContractMethod<[], [bigint], "view">;

  addNewOwner: TypedContractMethod<
    [_newOwner: AddressLike],
    [bigint],
    "nonpayable"
  >;

  checkIsOwner: TypedContractMethod<[_owner: AddressLike], [boolean], "view">;

  confirmTransaction: TypedContractMethod<
    [_txIndex: BigNumberish, _from: AddressLike],
    [MultiSignatureWallet.TransactionStructOutput],
    "nonpayable"
  >;

  confirmedTransactions: TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [boolean],
    "view"
  >;

  executeTransaction: TypedContractMethod<
    [_txIndex: BigNumberish, _from: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getBalace: TypedContractMethod<[], [bigint], "view">;

  getOwners: TypedContractMethod<[], [string[]], "view">;

  getTransationDetails: TypedContractMethod<
    [_txIndex: BigNumberish],
    [MultiSignatureWallet.TransactionStructOutput],
    "view"
  >;

  getUserTransactions: TypedContractMethod<
    [],
    [MultiSignatureWallet.TransactionStructOutput[]],
    "view"
  >;

  owners: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  removeOwner: TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;

  revokeTransaction: TypedContractMethod<
    [_txIndex: BigNumberish, _from: AddressLike],
    [MultiSignatureWallet.TransactionStructOutput],
    "nonpayable"
  >;

  submitTransaction: TypedContractMethod<
    [_to: AddressLike, _amount: BigNumberish, _data: BytesLike],
    [MultiSignatureWallet.TransactionStructOutput],
    "nonpayable"
  >;

  transactions: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [
        string,
        bigint,
        string,
        string,
        bigint,
        string,
        boolean,
        bigint,
        bigint
      ] & {
        txHash: string;
        txIndex: bigint;
        from: string;
        to: string;
        amount: bigint;
        data: string;
        executed: boolean;
        confirmations: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CONFIRMATIIONS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addNewOwner"
  ): TypedContractMethod<[_newOwner: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "checkIsOwner"
  ): TypedContractMethod<[_owner: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "confirmTransaction"
  ): TypedContractMethod<
    [_txIndex: BigNumberish, _from: AddressLike],
    [MultiSignatureWallet.TransactionStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "confirmedTransactions"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "executeTransaction"
  ): TypedContractMethod<
    [_txIndex: BigNumberish, _from: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBalace"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOwners"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTransationDetails"
  ): TypedContractMethod<
    [_txIndex: BigNumberish],
    [MultiSignatureWallet.TransactionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserTransactions"
  ): TypedContractMethod<
    [],
    [MultiSignatureWallet.TransactionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "owners"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "removeOwner"
  ): TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeTransaction"
  ): TypedContractMethod<
    [_txIndex: BigNumberish, _from: AddressLike],
    [MultiSignatureWallet.TransactionStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitTransaction"
  ): TypedContractMethod<
    [_to: AddressLike, _amount: BigNumberish, _data: BytesLike],
    [MultiSignatureWallet.TransactionStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transactions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [
        string,
        bigint,
        string,
        string,
        bigint,
        string,
        boolean,
        bigint,
        bigint
      ] & {
        txHash: string;
        txIndex: bigint;
        from: string;
        to: string;
        amount: bigint;
        data: string;
        executed: boolean;
        confirmations: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "OwnerAdded"
  ): TypedContractEvent<
    OwnerAddedEvent.InputTuple,
    OwnerAddedEvent.OutputTuple,
    OwnerAddedEvent.OutputObject
  >;
  getEvent(
    key: "OwnerRemoved"
  ): TypedContractEvent<
    OwnerRemovedEvent.InputTuple,
    OwnerRemovedEvent.OutputTuple,
    OwnerRemovedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionConfrimed"
  ): TypedContractEvent<
    TransactionConfrimedEvent.InputTuple,
    TransactionConfrimedEvent.OutputTuple,
    TransactionConfrimedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionExecuted"
  ): TypedContractEvent<
    TransactionExecutedEvent.InputTuple,
    TransactionExecutedEvent.OutputTuple,
    TransactionExecutedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionRevoked"
  ): TypedContractEvent<
    TransactionRevokedEvent.InputTuple,
    TransactionRevokedEvent.OutputTuple,
    TransactionRevokedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionSubmitted"
  ): TypedContractEvent<
    TransactionSubmittedEvent.InputTuple,
    TransactionSubmittedEvent.OutputTuple,
    TransactionSubmittedEvent.OutputObject
  >;

  filters: {
    "OwnerAdded(address,uint256)": TypedContractEvent<
      OwnerAddedEvent.InputTuple,
      OwnerAddedEvent.OutputTuple,
      OwnerAddedEvent.OutputObject
    >;
    OwnerAdded: TypedContractEvent<
      OwnerAddedEvent.InputTuple,
      OwnerAddedEvent.OutputTuple,
      OwnerAddedEvent.OutputObject
    >;

    "OwnerRemoved(address)": TypedContractEvent<
      OwnerRemovedEvent.InputTuple,
      OwnerRemovedEvent.OutputTuple,
      OwnerRemovedEvent.OutputObject
    >;
    OwnerRemoved: TypedContractEvent<
      OwnerRemovedEvent.InputTuple,
      OwnerRemovedEvent.OutputTuple,
      OwnerRemovedEvent.OutputObject
    >;

    "TransactionConfrimed(bytes32,address)": TypedContractEvent<
      TransactionConfrimedEvent.InputTuple,
      TransactionConfrimedEvent.OutputTuple,
      TransactionConfrimedEvent.OutputObject
    >;
    TransactionConfrimed: TypedContractEvent<
      TransactionConfrimedEvent.InputTuple,
      TransactionConfrimedEvent.OutputTuple,
      TransactionConfrimedEvent.OutputObject
    >;

    "TransactionExecuted(bytes32)": TypedContractEvent<
      TransactionExecutedEvent.InputTuple,
      TransactionExecutedEvent.OutputTuple,
      TransactionExecutedEvent.OutputObject
    >;
    TransactionExecuted: TypedContractEvent<
      TransactionExecutedEvent.InputTuple,
      TransactionExecutedEvent.OutputTuple,
      TransactionExecutedEvent.OutputObject
    >;

    "TransactionRevoked(bytes32,address)": TypedContractEvent<
      TransactionRevokedEvent.InputTuple,
      TransactionRevokedEvent.OutputTuple,
      TransactionRevokedEvent.OutputObject
    >;
    TransactionRevoked: TypedContractEvent<
      TransactionRevokedEvent.InputTuple,
      TransactionRevokedEvent.OutputTuple,
      TransactionRevokedEvent.OutputObject
    >;

    "TransactionSubmitted(bytes32,address,address,uint256,bytes)": TypedContractEvent<
      TransactionSubmittedEvent.InputTuple,
      TransactionSubmittedEvent.OutputTuple,
      TransactionSubmittedEvent.OutputObject
    >;
    TransactionSubmitted: TypedContractEvent<
      TransactionSubmittedEvent.InputTuple,
      TransactionSubmittedEvent.OutputTuple,
      TransactionSubmittedEvent.OutputObject
    >;
  };
}
