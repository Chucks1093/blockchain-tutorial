/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace SecretMessage {
  export type MessageInfoStruct = {
    content: string;
    recipient: AddressLike;
    timestamp: BigNumberish;
  };

  export type MessageInfoStructOutput = [
    content: string,
    recipient: string,
    timestamp: bigint
  ] & { content: string; recipient: string; timestamp: bigint };
}

export interface SecretMessageInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "generalMessage"
      | "getGeneralMessage"
      | "getReceivedMessages"
      | "getSentMessages"
      | "receivedMessages"
      | "sendMessage"
      | "sentMessages"
      | "setGeneralMessage"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "MessageSent" | "SecretMessageSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "generalMessage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGeneralMessage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReceivedMessages",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSentMessages",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receivedMessages",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sentMessages",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGeneralMessage",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "generalMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGeneralMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReceivedMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSentMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receivedMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sentMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGeneralMessage",
    data: BytesLike
  ): Result;
}

export namespace MessageSentEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    message: string
  ];
  export type OutputTuple = [from: string, to: string, message: string];
  export interface OutputObject {
    from: string;
    to: string;
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SecretMessageSetEvent {
  export type InputTuple = [_owner: AddressLike, _newMessage: string];
  export type OutputTuple = [_owner: string, _newMessage: string];
  export interface OutputObject {
    _owner: string;
    _newMessage: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SecretMessage extends BaseContract {
  connect(runner?: ContractRunner | null): SecretMessage;
  waitForDeployment(): Promise<this>;

  interface: SecretMessageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  generalMessage: TypedContractMethod<[], [string], "view">;

  getGeneralMessage: TypedContractMethod<[], [string], "view">;

  getReceivedMessages: TypedContractMethod<
    [],
    [SecretMessage.MessageInfoStructOutput[]],
    "view"
  >;

  getSentMessages: TypedContractMethod<
    [],
    [SecretMessage.MessageInfoStructOutput[]],
    "view"
  >;

  receivedMessages: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, string, bigint] & {
        content: string;
        recipient: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  sendMessage: TypedContractMethod<
    [_to: AddressLike, _message: string],
    [void],
    "nonpayable"
  >;

  sentMessages: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, string, bigint] & {
        content: string;
        recipient: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  setGeneralMessage: TypedContractMethod<
    [_newMessage: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "generalMessage"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getGeneralMessage"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getReceivedMessages"
  ): TypedContractMethod<[], [SecretMessage.MessageInfoStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getSentMessages"
  ): TypedContractMethod<[], [SecretMessage.MessageInfoStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "receivedMessages"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, string, bigint] & {
        content: string;
        recipient: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "sendMessage"
  ): TypedContractMethod<
    [_to: AddressLike, _message: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sentMessages"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, string, bigint] & {
        content: string;
        recipient: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setGeneralMessage"
  ): TypedContractMethod<[_newMessage: string], [void], "nonpayable">;

  getEvent(
    key: "MessageSent"
  ): TypedContractEvent<
    MessageSentEvent.InputTuple,
    MessageSentEvent.OutputTuple,
    MessageSentEvent.OutputObject
  >;
  getEvent(
    key: "SecretMessageSet"
  ): TypedContractEvent<
    SecretMessageSetEvent.InputTuple,
    SecretMessageSetEvent.OutputTuple,
    SecretMessageSetEvent.OutputObject
  >;

  filters: {
    "MessageSent(address,address,string)": TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;
    MessageSent: TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;

    "SecretMessageSet(address,string)": TypedContractEvent<
      SecretMessageSetEvent.InputTuple,
      SecretMessageSetEvent.OutputTuple,
      SecretMessageSetEvent.OutputObject
    >;
    SecretMessageSet: TypedContractEvent<
      SecretMessageSetEvent.InputTuple,
      SecretMessageSetEvent.OutputTuple,
      SecretMessageSetEvent.OutputObject
    >;
  };
}
